/*
 Sakila SQL Project – Movie Rental Data Analysis
--------------------------------------------------
 Objectives:
1. View all customers (first 10 rows)
2. Top 5 most rented movies
3. Monthly rental trends
4. Revenue generated by each store
5. Most active customers (by number of rentals)
6. Films with ‘Behind the Scenes’ in special features
7. Count of inactive customers
8. Top 5 customers by total payments
9. Average rental duration of films by rating
10. Revenue by film category

 Database: Sakila Sample Database
Tool: MySQL Workbench
 
 | writing the queries below |
*/


USE sakila;
/*1-Retrieves the first 10 customer records from the database. */
SELECT * FROM customer
LIMIT 10;

/*2-Lists the 5 most frequently rented movie titles. */

SELECT f.title, COUNT(*) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;

/*3-Shows how rentals vary by month to identify seasonal patterns. */

SELECT 
  MONTHNAME(rental_date) AS month,
  COUNT(*) AS total_rentals
FROM rental
GROUP BY MONTH(rental_date), MONTHNAME(rental_date)
ORDER BY MONTH(rental_date);

/*4-Calculates total revenue (sum of payments) per store. */

SELECT c.store_id, ROUND(SUM(p.amount), 2) AS total_revenue
FROM payment p
JOIN customer c ON p.customer_id = c.customer_id
GROUP BY c.store_id;

/*5-Finds customers who rented the most movies. */

SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
       COUNT(r.rental_id) AS total_rentals
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY total_rentals DESC
LIMIT 5;

/*6-Lists movies that include "Behind the Scenes" in their special features. */

SELECT title, special_features
FROM film
WHERE special_features LIKE '%Behind the Scenes%'
Limit 10;

/*7-Returns the number of customers marked as inactive. */

SELECT COUNT(*) AS inactive_customers
FROM customer
WHERE active = 0;

/*8-Finds the top 5 customers who have paid the most. */

SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
       ROUND(SUM(p.amount), 2) AS total_paid
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id
ORDER BY total_paid DESC
LIMIT 5;

/* 9-Shows how long movies are rented on average by rating.*/

SELECT rating, ROUND(AVG(rental_duration), 2) AS avg_rental_duration
FROM film
GROUP BY rating;

/*10-Calculates revenue generated per film category. */

SELECT c.name AS category, ROUND(SUM(p.amount), 2) AS total_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY total_revenue DESC;

